%{
#include "global.h"
using namespace std;

extern Scheme* scheme;

extern int lineNo;
extern int yylex();									//call lex
extern char bufError[100];							//store error information
void yyerror(char *s);								//deal with error

PentestCase* pentestcase;							//penetration testing case 
PentestPath* pentestpath;							//penetration testing path
Variable* vari;										//variable
std::vector<Variable*>	vecVariable;				//store variable
Variable variother;
std::vector<Variable> vecVariableother;
std::vector<Variable*>::iterator	itorVariable;	
std::vector<string> pathName;						//path's name 
int variableType;									//variable's type 
int expType;										//
Goal finalGoal;										//scheme's final goal
Goal* caseGoal;										//case
Exceptation* caseExceptation;						//case's exception
std::string strTime;								//Ê±¼ästring
std::string strIp;									//IP string
std::string strMethod;								//method
std::string strCveNumber;							
std::string strGoalName;							//goal's name
std::string strExcepteName;							//exception's name
std::string temp;									//temp string
std::string strPathName;							//name of penetration testing path
%}

%union
{
  char	*sval;
  int	ival;
}

%token		DEFINE					"define"
%token		PENTESTGOAL				"penetestgoal"	
%token		PENTESTTIME				"pentesttime"
%token		PENTESTTARGET			"pentesttarget"

%token		LEFT_BIG_BRACKET		"{"
%token		RIGHT_BIG_BRACKET		"}"
%token		LEFT_SMALL_BRACKET		"("
%token		RIGHT_SMALL_BRACKET		")"
%token		COMM				","
%token		PATH				"path"
%token		DOMAIN
%token		ASSIGN				"="
%token		GOALPRIVILEGE
%token		EXPECTEPRIVILEGE
%token		LARGER				">"
%token		LESS				"<"
%token		EQUAL				"=="
%token		NOTEQUAL			"!="
%token		LARGEREQUAL			">="
%token		LESSEQUAL			"<="
%token		AND				"&&"
%token		OR				"||"
%token		NOT				"!"
%token		OWN				"own"
%token		CONNECT				"connect"
%token		SERVICE				"service"
%token		TRUST				"trust"
%token		FTP				"ftp"
%token		TELNET				"telnet"
%token		WEB				"web"
%token		GAINPRIVILEGE				

%token		<sval>	GUEST				"guest"
%token		<sval>	USER				"user"
%token		<sval>	ADMINISTRATOR		"administrator"
%token		<sval>	ROOT				"root"
%token		<sval>	GOAL				"goal"
%token		<sval>	TIME				"time"
%token		<sval>	EXPECTATION			"expectation"
%token		<sval>	STRING
%token		<sval>	TIMECONSTANT
%token		<sval>	NOW
%token		<ival>	NUMBER
%token		<sval>	IPADDR
%token		<sval>	CVENUMBER
%token		<sval>	MASK
%token		<sval>	IF					"if"
%token		<sval>	THEN				"then"
%token		<sval>	ENDIF				"endif"
%token		<sval>	USE					"use"
%token		<sval>	EXPLOIT				"exploit"
%token		<sval>	FOR					"for"
%token		<sval>	PENETRATE			"penetrate"
%token		<sval>	EXPECT				"expect"
%token		<sval>	OUT					"out"
%token		<sval>	OVERFLOW			"overflow"
%token		<sval>	RACECONDITON		"raceconditon"
%token		<sval>	PASSWORDCRACK		"passwordcrack"
%token		<sval>	LOGIN				"login"


%type		<sval>	privilege_variable
%type		<ival>	var_type
%type		<ival>	exp_mark
%type		<sval>	service_variable
%type		<ival>	port
%type		<sval>	status_variable
%type		<sval>	time
%type		<sval>	target_variable
%type		<ival>	mask_constant
%type		<sval>	time_value

%debug
%error-verbose
%start ptsdl

%%
ptsdl:	scheme_declaration global_variable_definition scheme_description;

scheme_declaration:	time_declaration goal_declaration target_declaration;

time_declaration:	DEFINE PENTESTTIME LEFT_BIG_BRACKET time_value COMM time_value RIGHT_BIG_BRACKET
{
	scheme->SetBeginTime(string($4));
	scheme->SetEndTime(strTime);			//set scheme's time
};

time_value: function | time;
function: NOW;
time: TIMECONSTANT
{
	strTime = string($1);
};

goal_declaration:	DEFINE PENTESTGOAL LEFT_BIG_BRACKET final_goal RIGHT_BIG_BRACKET;

final_goal:		GAINPRIVILEGE LEFT_SMALL_BRACKET target_variable COMM privilege_variable RIGHT_SMALL_BRACKET
{
	finalGoal.strHost = string($3);
	temp = string($5);
	finalGoal.accType = temp;
	scheme->SetSchemeGoal(finalGoal);		//set scheme's final goal

};

privilege_variable: 
		USER	{$$="user";}	 
		|GUEST	{$$="guest";}	 
		|ROOT	{$$="root";}	 
		|ADMINISTRATOR	{$$="administrator";}; 

target_declaration:	DEFINE PENTESTTARGET LEFT_BIG_BRACKET target_variable RIGHT_BIG_BRACKET;
target_variable:	target_variable_statement | target_variable COMM target_variable_statement;
target_variable_statement:	network | computer;
network:	domain | subnet;
domain:		DOMAIN domain_name;

domain_name:	STRING 
{
	temp=$1;
	scheme->SetTarget(temp);			//set scheme's targte
};
subnet: IPADDR MASK mask_constant
{
	temp = string($1);
	temp += " ";
	char str[10];
	temp += string(itoa($3, str, 10));
	scheme->SetTarget(temp);			//set scheme's targte
};

mask_constant: NUMBER
{
	$$ = $1;
}
computer: IPADDR
{
	strIp = $1;
}
global_variable_definition: global_variable_statement
				| global_variable_definition global_variable_statement;

global_variable_statement: var_type STRING
{	
	vari = new Variable();
	vari->iType = $1;
	vari->name = string($2);
	vecVariable.push_back(vari);
}
						| assign_sentences;
var_type: TIME {$$=0;}
		| GOAL{$$=1;}
		| EXPECTATION {$$ =2;};
	
assign_sentences: STRING ASSIGN variable_value
{
	int i = 0;
	for (itorVariable = vecVariable.begin(); itorVariable != vecVariable.end(); ++itorVariable)
	{
		if ((*itorVariable)->name == string($1))
		{
			if (variableType ==0)
			{
				vecVariable[i]->value.time = &strTime;
			}
			else if (variableType == 1)
			{
				vecVariable[i]->value.goal = caseGoal;
			}
			else
			{
				vecVariable[i]->value.exceptation = caseExceptation;
			}
			
		}
		else 
		{
			//cout << "error" << endl;
		}
		++i;
	}
};
variable_value: time_value
		{
			variableType = 0;
		}
		| goal_value
		{
			variableType = 1;
		}
		| expectation_value
		{
			variableType = 2;
		};

/*time_value: TIMECONSTANT
{
	strTime = string($1);
};*/

goal_value: GOALPRIVILEGE LEFT_SMALL_BRACKET target_variable COMM privilege_variable RIGHT_SMALL_BRACKET
{
	caseGoal = new Goal();
	caseGoal->strHost = strIp;
	temp = string($5);
	caseGoal->accType = temp;
	/*
	if (strcmp(temp, "guest") == 0)
	{
		finalGoal.acc = USER;
	}
	else if (strcmp(temp, "user") == 0)
	{
		finalGoal.acc = USER;
	}
	else if (strcmp(temp, "guest") == 0)
	{
		finalGoal.acc = ROOT;
	}
	else
	{
		finalGoal.acc = ADMINSTRATOR;
	}*/
};

expectation_value: EXPECTEPRIVILEGE LEFT_SMALL_BRACKET target_variable COMM privilege_variable RIGHT_SMALL_BRACKET
{
	caseExceptation = new Exceptation();
	caseExceptation->strHost = strIp;
	temp = string($5);
	caseExceptation->accType = temp;
	/*if (strcmp(temp, "guest") == 0)
	{
		finalGoal.acc = USER;
	}
	else if (strcmp(temp, "user") == 0)
	{
		finalGoal.acc = USER;
	}
	else if (strcmp(temp, "guest") == 0)
	{
		finalGoal.acc = ROOT;
	}
	else
	{
		finalGoal.acc = ADMINSTRATOR;
	}*/
}

scheme_description : path_block | scheme_description path_block;

path_block: PATH path_name LEFT_BIG_BRACKET pentest_scheme_statement RIGHT_BIG_BRACKET
{
};

path_name: STRING 
{
	strPathName = $1;
};

pentest_scheme_statement: pentest_case_statement
			| pentest_scheme_statement pentest_case_statement;

pentest_case_statement: assign_sentences constraints;
constraints: IF LEFT_SMALL_BRACKET condition RIGHT_SMALL_BRACKET THEN pentest_case ENDIF
{
	pentestpath = new PentestPath();
	pentestpath->pathName = strPathName;
	scheme->InsertPath(*pentestpath);
	scheme->InsertCase(strPathName, *pentestcase);
};

condition: condition_sentence
		|condition AND condition_sentence 
		|condition OR  condition_sentence 
		|NOT condition;
condition_sentence: expression exp_mark expression;

expression: STRING;

exp_mark:
	LARGER 
	{
	expType = 1;
	}
	|LESS	{expType = 2;}
	|EQUAL	{expType = 3;}
	|NOTEQUAL	{expType = 4;}
	|LARGEREQUAL	{expType = 5;}
	|LESSEQUAL	
	{
	expType = 6;
	};
pentest_case: IF LEFT_SMALL_BRACKET precondition RIGHT_SMALL_BRACKET 
	      THEN
		USE method_variable EXPLOIT STRING FOR goal_variable
		PENETRATE target_variable 
		EXPECT expectation_variable OUT status_variable
	    ENDIF
	     {
		pentestcase = new PentestCase();
		pentestcase->method = strMethod;
		pentestcase->cvenumber = string($9);
		for (itorVariable = vecVariable.begin(); itorVariable != vecVariable.end(); ++itorVariable)
		{
			if ((*itorVariable)->name == strGoalName)
			{
				pentestcase->goal = *((*itorVariable)->value.goal);
			}
			else if ((*itorVariable)->name == strExcepteName)
			{
				pentestcase->exp = *((*itorVariable)->value.exceptation);
			}

		}

	     }

precondition:  condition_sentence
		|condition AND condition_sentence 
		|condition OR  condition_sentence 
		|NOT condition;

condition_sentence: privilegecondition
			|relationcondition;
privilegecondition: OWN LEFT_SMALL_BRACKET target_variable COMM privilege_variable RIGHT_SMALL_BRACKET;
relationcondition: connectcondition
			| servicecondition
			| trustcondition;
connectcondition: CONNECT LEFT_SMALL_BRACKET target_variable COMM target_variable COMM port RIGHT_SMALL_BRACKET;

servicecondition: SERVICE LEFT_SMALL_BRACKET target_variable COMM target_variable COMM service_variable COMM port RIGHT_SMALL_BRACKET;

trustcondition: TRUST LEFT_SMALL_BRACKET target_variable COMM target_variable RIGHT_SMALL_BRACKET;

service_variable: FTP {temp = "ftp";}
		| TELNET {temp = "telnet";}
		| WEB {temp = "web";};
port: NUMBER
{
	$$ = $1;
};

method_variable: OVERFLOW
			{
				strMethod = "overflow";
			}
		| RACECONDITON
			{
				strMethod = "raceconditon";	
			}
		| PASSWORDCRACK
			{
				strMethod = "passwordcrack";
			}
		| LOGIN
			{
				strMethod = "login"
			};
/*vulnerability_variable: STRING LINE NUMBER LINE NUMBER
{
	strCveNumber = "CVE-";
	char str[10];
	temp = string(itoa($4, str, 5));
	strCveNumber += temp;
	temp = string(itoa($4, str, 5));
	strCveNumber += "-";
	strCveNumber += temp;
};*/

goal_variable: STRING
{
	strGoalName = string($1);
};

expectation_variable: STRING 
{
	strExcepteName = string($1);	
}

status_variable: STRING
{
	$$ = $1;
};
%%

void yyerror(char *s)
{
   sprintf(bufError,"line %d:\n%s", lineNo, s);
}