// PentestToolBase.cpp : implementation file
//
#include <string>
#include "stdafx.h"
#include "PentestTool.h"
#include "PentestToolBase.h"
#include "DataConnection.h"
#include "AddTool.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// PentestToolBase dialog


PentestToolBase::PentestToolBase(CWnd* pParent /*=NULL*/)
	: CDialog(PentestToolBase::IDD, pParent)
{
	//{{AFX_DATA_INIT(PentestToolBase)
		// NOTE: the /*ClassWizard*/ will add member initialization here
	//}}AFX_DATA_INIT
//	m_tool = new AddTool();
}


void PentestToolBase::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(PentestToolBase)
	DDX_Control(pDX, IDC_LIST_TOOL, m_list);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(PentestToolBase, CDialog)
	//{{AFX_MSG_MAP(PentestToolBase)
	ON_BN_CLICKED(IDC_BUTTON_DELETETOOL, OnButtonDeleteTool)
	ON_BN_CLICKED(IDC_BUTTON_ADDTOOL, OnButtonAddtool)
	ON_BN_CLICKED(IDC_BUTTON_DISPLAYTOOL, OnButtonDisplaytool)
	ON_NOTIFY(NM_CLICK, IDC_LIST_TOOL, PentestToolBase::OnNMClickListEvent)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// PentestToolBase message handlers

//Initialize the dialog box
BOOL PentestToolBase::OnInitDialog()
{
	CDialog::OnInitDialog();
	InitList(); //MFC的列表框初始化代码，DZY用的是ListCtrl控件，可以学一下
	_bstr_t strSql;
	strSql = "select * from ToolDescription;" ; //SQL语句
	DisplayTool(strSql); //打开窗口时就读取数据库，显示所有的手段
	return true;
}

//Initialize the list
void PentestToolBase::InitList()
{
	LONG lStyle; 
	//Get style of the window
    lStyle = GetWindowLong(m_list.m_hWnd, GWL_STYLE);
    lStyle |= LVS_REPORT; //设置是列表风格，共有4种风格
	//set style 
    SetWindowLong(m_list.m_hWnd, GWL_STYLE, lStyle);
	//set extend style
	DWORD dwStyle = m_list.GetExtendedStyle();
	dwStyle |= LVS_EX_FULLROWSELECT;
	dwStyle |= LVS_EX_GRIDLINES;
	dwStyle |= LVS_EX_SUBITEMIMAGES; //一个比特表示一个风格，所以添加风格的方式是比特并
	
	m_list.SetExtendedStyle(dwStyle); //设置扩展风格
	
	m_list.InsertColumn(0, "ToolId",LVCFMT_LEFT, 60); //一共添加6列
	m_list.InsertColumn(1, "ToolName", LVCFMT_LEFT, 100);
	m_list.InsertColumn(2, "CVE-Number", LVCFMT_LEFT, 120);
	m_list.InsertColumn(3, "ToolPriority", LVCFMT_LEFT, 90);
	m_list.InsertColumn(4, "ToolMethod", LVCFMT_LEFT, 100);
	m_list.InsertColumn(5, "ToolPath", LVCFMT_LEFT, 160);

	//***********************************//
	//测试代码，添加内容到列表框
	//***********************************//
	/*int col =0;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "1");
	m_list.SetItemText(col, 1, "metasploit");
	m_list.SetItemText(col, 2, "cve-2002-0987");
	m_list.SetItemText(col, 3, "1");
	m_list.SetItemText(col, 4, "overflow");
	m_list.SetItemText(col, 5, "home/tool/metasploit");

	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "2");
	m_list.SetItemText(col, 1, "zaproxyll");
	m_list.SetItemText(col, 2, "cve-2009-4723");
	m_list.SetItemText(col, 3, "2");
	m_list.SetItemText(col, 4, "sqlinjection");
	m_list.SetItemText(col, 5, "home/tool/zaproxyll");

	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "3");
	m_list.SetItemText(col, 1, "cain&abel");
	m_list.SetItemText(col, 2, "cve-2007-3851");
	m_list.SetItemText(col, 3, "1");
	m_list.SetItemText(col, 4, "passwordcract");
	m_list.SetItemText(col, 5, "home/tool/cain&abel");

	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "4");
	m_list.SetItemText(col, 1, "ida");
	m_list.SetItemText(col, 2, "cve-2001-4612");
	m_list.SetItemText(col, 3, "2");
	m_list.SetItemText(col, 4, "overflow");
	m_list.SetItemText(col, 5, "home/tool/ida");

	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "5");
	m_list.SetItemText(col, 1, "metasploit");
	m_list.SetItemText(col, 2, "cve-2006-1257");
	m_list.SetItemText(col, 3, "1");
	m_list.SetItemText(col, 4, "overflow");
	m_list.SetItemText(col, 5, "home/tool/metasploit");

	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "6");
	m_list.SetItemText(col, 1, "wkssvc-exploit");
	m_list.SetItemText(col, 2, "cve-2010-0957");
	m_list.SetItemText(col, 3, "1");
	m_list.SetItemText(col, 4, "overflow");
	m_list.SetItemText(col, 5, "home/tool/wkssvc-exploit");

	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "7");
	m_list.SetItemText(col, 1, "ms04-045exploit");
	m_list.SetItemText(col, 2, "cve-2003-0415");
	m_list.SetItemText(col, 3, "1");
	m_list.SetItemText(col, 4, "overflow");
	m_list.SetItemText(col, 5, "home/tool/ms04-045exploit");

	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "8");
	m_list.SetItemText(col, 1, "mayday-linux");
	m_list.SetItemText(col, 2, "cve-2002-1864");
	m_list.SetItemText(col, 3, "2");
	m_list.SetItemText(col, 4, "overflow");
	m_list.SetItemText(col, 5, "home/tool/ms04-045exploit");
	//Sqlmap
	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "9");
	m_list.SetItemText(col, 1, "Sqlmap");
	m_list.SetItemText(col, 2, "cve-2005-3034");
	m_list.SetItemText(col, 3, "2");
	m_list.SetItemText(col, 4, "sqlinjection");
	m_list.SetItemText(col, 5, "home/tool/Sqlmap");

	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "10");
	m_list.SetItemText(col, 1, "raceattack");
	m_list.SetItemText(col, 2, "CVE-2010-0747");
	m_list.SetItemText(col, 3, "1");
	m_list.SetItemText(col, 4, "racecondition");
	m_list.SetItemText(col, 5, "home/tool/raceattack");

	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "11");
	m_list.SetItemText(col, 1, "metasploit");
	m_list.SetItemText(col, 2, "cve-2008-4250");
	m_list.SetItemText(col, 3, "2");
	m_list.SetItemText(col, 4, "overflow");
	m_list.SetItemText(col, 5, "home/tool/ms04-045exploit");

	col++;
	m_list.InsertItem(col, "");
	m_list.SetItemText(col, 0, "12");
	m_list.SetItemText(col, 1, "safe3-sql-injector");
	m_list.SetItemText(col, 2, "cve-2011-0914");
	m_list.SetItemText(col, 3, "2");
	m_list.SetItemText(col, 4, "sqlinjection");
	m_list.SetItemText(col, 5, "home/tool/safe3-sql-injector");*/

}

//Read tools' information form database, and display on the list
BOOL PentestToolBase::DisplayTool(_bstr_t strSql)
{
	DataConnection dataConnection;
	_RecordsetPtr pRecordset;
	dataConnection.OnInitADOConn();
	
	if(!dataConnection.GetRecordSet(pRecordset , strSql))
	{
		return false;
	}
	int icount=pRecordset->GetRecordCount();
	if(0==icount)
	{
		MessageBox("Thers is no information");
	}
	
	int col=0;
	_variant_t  result;
	CString str;
	while(!pRecordset->adoEOF)
	{
		m_list.InsertItem(col,"");
		
		result = pRecordset->GetCollect("toolId");		
		str=result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		m_list.SetItemText(col, 0, str);
		
		result = pRecordset->GetCollect("toolName");		
		str=result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		m_list.SetItemText(col, 1, str);
		
		result = pRecordset->GetCollect("toolCveNumber");		
		str=result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		m_list.SetItemText(col, 2, str);
		
		result = pRecordset->GetCollect("toolPriority");		
		str=result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		m_list.SetItemText(col, 3, str);
		
		result = pRecordset->GetCollect("toolMethod");		
		str=result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		m_list.SetItemText(col, 4, str);

		result = pRecordset->GetCollect("toolPath");		
		str=result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		m_list.SetItemText(col, 5, str);
		
		pRecordset->MoveNext();
		col++;
	}
	dataConnection.ExitConnect();
}

//Delete selected tool from database
BOOL PentestToolBase::DeleteTool(_bstr_t strSql)
{
	DataConnection dataConnection;
	_RecordsetPtr pRecordset;
	dataConnection.OnInitADOConn();
	
	if(!dataConnection.GetRecordSet(pRecordset , strSql))
	{
		return false;
	}
	try
	{
		pRecordset->MoveFirst();					//from zero
		pRecordset->Move(m_iCurrentLine);			
		pRecordset->Delete(adAffectCurrent);		//parameter:adAffectCurrent is to delete current recode
		pRecordset->Update();
	}
	catch(_com_error *e)
	{
		AfxMessageBox(e->ErrorMessage());
	}
	dataConnection.ExitConnect();
	return true;
} 

//Method response to event when user click on the list
void PentestToolBase::OnNMClickListEvent(NMHDR *pNMHDR, LRESULT *pResult)
{
	//Reponse to click of mouse's left button, get the line whick click
	NM_LISTVIEW *pNMListView = (NM_LISTVIEW *) pNMHDR;
	if (pNMListView->iItem != -1)
	{
		m_iCurrentLine = pNMListView->iItem; //取出当前选择的行数，存入m_iCurrentLine
	}
	*pResult = 0;
}

//Method response to delete tool button
void PentestToolBase::OnButtonDeleteTool() 
{
	// TODO: Add your control notification handler code here
	//Get current line number		
	_bstr_t strSQL;
	strSQL = "select * from ToolDescription";
	DeleteTool(strSQL); //DeleteTool貌似也是删除Tool的功能，下面代码也是这个功能，貌似是重复了？这块功能使用的时候也貌似不正常
	CString strSqlDeleteCommand;
	strSqlDeleteCommand.Format("delete from Command where commandid='%s'", m_iCurrentLine); //拼SQL字符串
	DataConnection dataConnection;
	dataConnection.ExecuteSQL((_bstr_t)strSqlDeleteCommand); //执行SQL语句
	dataConnection.ExitConnect();
	//Delete all items of the list 
	m_list.DeleteAllItems();
	//Display all recodes from database
	DisplayTool(strSQL); //重新显示
}

//Add a new tool and write information to database
void PentestToolBase::OnButtonAddtool() 
{
	// TODO: Add your control notification handler code here
	AddTool *tool = new AddTool();
	if (tool->DoModal() == IDOK) //模态创建“添加手段对话框”
	{
		//取出所有设置的值
		CString name = tool->GetName();
		std::string str(name.GetBuffer(name.GetLength()));
		CString path = tool->GetPath();
		CString description = tool->GetDescription();
		CString cve = tool->GetCveNumber();
		CString method = tool->GetMethod();
		int priority = tool->GetPriority();

		int number = m_list.GetItemCount() + 1;			//Get current line number and add one
		CString num;
		num.Format("%d",num);
		DataConnection dataConnection;	
		CString strSqlToolDescription;
		CString strSqlToolCommand1;
		CString strSqlToolCommand2;
		CString strSqlToolCommand3;

		CString command1 = tool->GetCommand1();
		CString command2 = tool->GetCommand2();
		CString command3 = tool->GetCommand3();

		CString parameter1 = tool->GetParameter11();
		CString parameter2 = tool->GetParameter12();
		CString parameter3 = tool->GetParameter13();
		CString parameter4 = tool->GetParameter14();
		strSqlToolDescription.Format("insert into ToolDescription values('%d', '%s', '%s', '%s', \
			'%d', '%s', '%s')", number, name, description, path, priority, cve, method); //插入ToolDescription表的SQL语句
		strSqlToolCommand1.Format("insert into Command(commandid, command, parameter1, parameter2,\
			parameter3, parameter4) values('%d', '%s', '%s', '%s','%s','%s')", number, command1, \
			parameter1, parameter2, parameter3, parameter4); //插入Command表的SQL语句

		if (command2.GetLength() > 0) //可选，插入Command表的一条SQL语句
		{
			parameter1 = tool->GetParameter21();
			parameter2 = tool->GetParameter22();
			parameter3 = tool->GetParameter23();
			parameter4 = tool->GetParameter24();
			strSqlToolCommand2.Format("insert into Command(commandid, command, parameter1, parameter2,\
				parameter3, parameter4) values('%d', '%s', '%s', '%s','%s','%s')", number, command2, \
				parameter1, parameter2, parameter3, parameter4);
		}

		if (command3.GetLength() > 0) //可选，插入Command表的一条SQL语句
		{
			parameter1 = tool->GetParameter31();
			parameter2 = tool->GetParameter32();
			parameter3 = tool->GetParameter33();
			parameter4 = tool->GetParameter34();
			strSqlToolCommand3.Format("insert into Command(commandid, command, parameter1, parameter2,\
				parameter3, parameter4) values('%d', '%s', '%s', '%s','%s','%s')", number, command3, \
				parameter1, parameter2, parameter3, parameter4);
		}

		try
		{
			//执行全部的SQL语句
			dataConnection.ExecuteSQL((_bstr_t)strSqlToolDescription);
			dataConnection.ExecuteSQL((_bstr_t)strSqlToolCommand1);
			if (strSqlToolCommand2.GetLength() > 0)
			{
				dataConnection.ExecuteSQL((_bstr_t)strSqlToolCommand2);
			}
			if (strSqlToolCommand3.GetLength() > 0)
			{
				dataConnection.ExecuteSQL((_bstr_t)strSqlToolCommand3);
			}
		}
		catch (_com_error *e)
		{
			//do nothing
		}
		CString strSql = "select * from ToolDescription";
		m_list.DeleteAllItems();					//Delete all items
		DisplayTool((_bstr_t)strSql);				//Display all recodes from database
		dataConnection.ExitConnect(); //重新显示
	}
}

void PentestToolBase::OnOK() 
{
	// TODO: Add extra validation here
	CDialog::OnOK();
}

//Display a selected tool's detail information
void PentestToolBase::OnButtonDisplaytool() 
{
	// TODO: Add your control notification handler code here
	/*std::string toolInfo;
	toolInfo += "Name: metasploit\r\n";
	toolInfo += "Description:";
	toolInfo += " Metasploit是免费的网络攻击框架，其通过将任意攻击与多种不同的数据载荷进行配对，快速地进行多角度的测试，是一个可以高度定制、灵活优化的攻击开发和执行环境。Metasploit的侧重点与CANVAS和IMPACT有所不同，它对攻击的测试和开发进行了大量优化，但对攻击网络和提升特权不是那么注重。实际上，该框架并未包含漏洞或主机扫描器，需要用户自行获得。最新版本的Metasploit包含了180多种当前流行的操作系统和应用软件的exploit，以及100个shellcode。作为安全工具，它在安全检测中起到不容忽视的作用，并为漏洞自动化探测和及时检测系统漏洞提供有力的保障。";
	toolInfo +="\r\n";
	toolInfo += "command1: use	parameter1 unix/pai\r\n";
	toolInfo += "command2: set	parameter1 PAYLOAD	parameter2 RHOST= parameter3 RPORT=\r\n";
	toolInfo += "command3: exploit";
	MessageBox(toolInfo.c_str());*/
	CString strSql;
	int toolNumber = m_iCurrentLine + 1; //当前选择的行
	strSql.Format("select ToolDescription.toolName, \
	ToolDescription.toolDescription, Command.* from \
	Command, ToolDescription where ToolDescription.toolId=Command.commandid \
	and commandid='%d'", toolNumber); //选出跟当前选择的行m_iCurrentLine有关的所有信息的SQL语句

	DataConnection dataConnection;
	_RecordsetPtr pRecordset;
	dataConnection.OnInitADOConn();
	
	if(!dataConnection.GetRecordSet(pRecordset , (_bstr_t)strSql))
	{
		return;
	}
	int icount=pRecordset->GetRecordCount();
	int col=0;
	_variant_t  result;
	CString toolInfo;
	CString toolName;
	CString toolDescription;
	CString toolMethod;
	CString toolCommand = "";
	CString str;
	int commandNumber = 0;
	while(!pRecordset->adoEOF) //遍历记录集中的每一条记录
	{
		int parameterNumber = 0;
		++commandNumber;
		CString strCommand;
		strCommand.Format("command %d: ", commandNumber);

		result = pRecordset->GetCollect("toolName");		
		str = result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		toolName = str; //用四句话来读一个toolName，真够累的，后面都同理了
		
		/*result = pRecordset->GetCollect("toolMethod");		
		str = result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		toolMethod = str;*/

		result = pRecordset->GetCollect("toolDescription");
		str = result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		toolDescription = str; 
		
		result = pRecordset->GetCollect("command");
		str = result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		strCommand += str;
		strCommand += "\t";

		result = pRecordset->GetCollect("parameter1");
		str = result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		if (str.GetLength() > 0)
		{
			parameterNumber++;
			CString number;
			number.Format("parameter%d ", parameterNumber);
			strCommand += number;
			strCommand += str;
			strCommand += "\t";
		}
		
		result = pRecordset->GetCollect("parameter2");
		str = result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		if (str.GetLength() > 0)
		{
			parameterNumber++;
			CString number;
			number.Format("parameter%d ", parameterNumber);
			strCommand += number;
			strCommand += str;
			strCommand += "\t";
		}

		result = pRecordset->GetCollect("parameter3");
		str = result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");
		if (str.GetLength() > 0)
		{
			parameterNumber++;
			CString number;
			number.Format("parameter%d ", parameterNumber);
			strCommand += number;
			strCommand += str;
			strCommand += "\t";
		}

		result = pRecordset->GetCollect("parameter4");
		str = result.vt==VT_NULL?"":(char*)(_bstr_t)result;;
		str.TrimRight(" ");

		if (str.GetLength() > 0)
		{
			parameterNumber++;
			CString number;
			number.Format("parameter%d ", parameterNumber);
			strCommand += number;
			strCommand += str;
			strCommand += "\t";
		}
		strCommand += "\r\n";
		toolCommand += strCommand;

		pRecordset->MoveNext();
	}
	toolInfo = "name:" + toolName + "\r\n" + "Description: " + toolDescription + "\r\n" + toolCommand;
	MessageBox(toolInfo); //把信息组合成字符串，用弹框来显示
	dataConnection.ExitConnect();
}
