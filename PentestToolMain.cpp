// PentestToolMain.cpp : implementation file
//
//打开程序看到的第一个对话框类
#include "stdafx.h"
#include "PentestTool.h"
#include "PentestToolMain.h"

#include "global.h"
#include "TestInfo.h"
#include "Client.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

using namespace std;

/////////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About
//Extern external variables
extern char* FilePath;
extern Scheme* scheme;
extern char bufError[100];
extern std::vector<Metasploit> arrMetasploits;
extern void InitMetasploit();
typedef std::vector<std::string> strPath;
extern std::vector<strPath> str2DArrAttackStrings;
extern std::vector<pathStatus> str2DArrHostStatus;
extern std::vector<std::string> g_strArrPathNames;
extern bool dispalyPath;


class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// Dialog Data
	//{{AFX_DATA(CAboutDlg)
	enum { IDD = IDD_ABOUTBOX };
	//}}AFX_DATA

	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CAboutDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:
	//{{AFX_MSG(CAboutDlg)
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
	//{{AFX_DATA_INIT(CAboutDlg)
	//}}AFX_DATA_INIT
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAboutDlg)
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
	//{{AFX_MSG_MAP(CAboutDlg)
		// No message handlers
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// PentestToolMain dialog

PentestToolMain::PentestToolMain(CWnd* pParent /*=NULL*/)
	: CDialog(PentestToolMain::IDD, pParent)
{
	//{{AFX_DATA_INIT(PentestToolMain)
		// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
	mInfo = new TestInfo(); //渗透测试用例集合的创建
	mToolBase = new PentestToolBase(); //渗透测试手段对话框的创建
}

void PentestToolMain::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(PentestToolMain)
		// NOTE: the ClassWizard will add DDX and DDV calls here
	DDX_Control(pDX, IDC_EDIT_SCHEME, m_edit);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(PentestToolMain, CDialog)
	//{{AFX_MSG_MAP(PentestToolMain)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON_OPEN, OnButtonOpenScheme)
	ON_BN_CLICKED(IDC_BUTTON_PARSER, OnButtonParser)
	ON_BN_CLICKED(IDC_BUTTON_PENTESTTOOL, OnButtonPentestTool)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// PentestToolMain message handlers

BOOL PentestToolMain::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Add "About..." menu item to system menu.

	// IDM_ABOUTBOX must be in the system command range.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		CString strAboutMenu;
		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon
	
	// TODO: Add extra initialization here
	
	return TRUE;  // return TRUE  unless you set the focus to a control
}

void PentestToolMain::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void PentestToolMain::OnPaint() 
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR PentestToolMain::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}

void PentestToolMain::OnButtonOpenScheme() 
{
	// TODO: Add your control notification handler code here
	char* result;
	FilePath = (char *)malloc(200 * sizeof(char));
	//MFC“打开文件”对话框的标准调用方式
    CFileDialog dlgFile(TRUE, NULL, NULL, OFN_HIDEREADONLY, _T("Describe Files (*.pts)|*.pts|All Files (*.*)|*.*||"), NULL);
    if (dlgFile.DoModal() == IDOK)
    {
        mFileName = dlgFile.GetPathName();
    }
	result = mFileName.GetBuffer(mFileName.GetLength()); //直接result = mFileName就可以自动类型转换，DZY多此一举了
	strcpy(FilePath, result);
	CFile file(mFileName, CFile::modeRead);  //MFC标准的读文件方式
	int nLen = file.GetLength();
	mchBuffer[nLen+1] =0;
	file.Read(mchBuffer, nLen); //把文件内容读到mchBuffer里
	file.Close();

	GetDlgItem(IDC_EDIT_SCHEME)->SetWindowText(mchBuffer); //显示在渗透测试方案编辑框里
}

void PentestToolMain::OnButtonParser() 
{
	// TODO: Add your control notification handler code here
	// Detect the user have select a penetration testing scheme
	CString error;
	string strMessage;
	m_edit.GetWindowText(error);
	//DDX_Control(pDX, IDC_EDIT_SCHEME, m_edit);这句话可看出m_edit就是IDC_EDIT_SCHEME，即渗透测试方案编辑框
	if (error.GetLength() == 0) //若渗透测试方案编辑框是空的，则提醒加载方案
	{
		MessageBox("Please select a scheme");
		return;
	}
	int result;
	result = PtsMain(FilePath); //PTS文件路径，这里是调用Flex(lex的进化版，用于词法分析)和Bison(yacc的进化版，用于语法分析)生成的代码进行PTS文件的解析
	//这个函数调用完了以后，会设置scheme这个全局变量里面的东西，因此scheme才是真正的返回结果
	if(result != 0) //解析出错
	{
		MessageBox(bufError, MB_OK, MB_ICONERROR);
		return;
	}
	else
	{
		//do nothing
	}
	string strBeginTime;
	string strEndTime;
	strBeginTime = scheme->GetBeginTime();
	strEndTime = scheme->GetEndTime();
	Goal g1 = scheme->GetSchemeGoal();
	string goalType = g1.accType;
	string goalHost = g1.strHost;
	string strPathName;
	string strCVENumber;
	vecStr strArrTargets = scheme->GetSchemeTarget(); //渗透测试目标集合
	vecPath arrPathes = scheme->GetAllPath(); //渗透测试路径集合
	int iPathCnt = arrPathes.size();
	vecPath::iterator iterPath = arrPathes.begin();
	PentestCase myCase;
	PentestPath myPath;
	vector<PentestCase> arrCases; //渗透测试用例集合

	strMessage += "渗透测试开始时间：" + strBeginTime + "\r\n";
	strMessage += "渗透测试结束时间：" + strEndTime + "\r\n";
	strMessage += "渗透测试目标：获取" + goalHost + "的 " + goalType + " 权限" + "\r\n";
	strMessage += "渗透测试范围：";

	vector<string>::iterator iterTarget = strArrTargets.begin();
	for (; iterTarget != strArrTargets.end(); ++iterTarget)
	{
		strMessage += *iterTarget + "   ";//"\r\t       ";
	}
	CString strPathCnt;
	strPathCnt.Format("%d", iPathCnt); //路径条数int转CString
	strMessage += "\r\n渗透测试路径条数：";
	strMessage += strPathCnt.GetBuffer(strPathCnt.GetLength()); //CString转string方法很多，这个方法很麻烦
	strMessage += "\r\n";

	

	InitMetasploit(); //初始化那14个漏洞的调用方式，也就是相融漏洞知识库
	int iPathIndex = 1; //从1开始的索引
	for (; iterPath != arrPathes.end(); ++iterPath) //对每一条路径进行遍历，把路径放到myPath里
	{
		CString strPathIndex;
		strPathIndex.Format("%d", iPathIndex);
		strMessage += "第 ";
		strMessage += strPathIndex.GetBuffer(strPathIndex.GetLength()); //CString转string方法很多，这个方法很麻烦
		strMessage += "条路径:";
		strMessage += "\r\n";
		
		myPath = *iterPath;
		strPathName = myPath.pathName;
		g_strArrPathNames.push_back(strPathName);
		arrCases = myPath.pathCase;
		strPath strArrAttackStringsForOnePath;
		pathStatus arrHostStatusForOnePath;
		string strHostName;
		string strAccType; //获取权限级别
		Status hostStatus;
		int iCaseCnt = arrCases.size();

		if (iCaseCnt > 1)
		{
			dispalyPath = true;
		}
		for (vector<PentestCase>::iterator caseIt = arrCases.begin(); caseIt != arrCases.end(); ++ caseIt)
		//对每一个用例进行遍历，把用例放到myCase里
		{
			myCase = *caseIt;

			strCVENumber = myCase.cvenumber;
			vector<Metasploit>::iterator iterMetasploit = arrMetasploits.begin();
			strMessage += "\t";
			strMessage += "渗透" + myCase.goal.strHost + "主机" + "\r\n";
			for (; iterMetasploit != arrMetasploits.end(); ++ iterMetasploit)
			{
				if (strCVENumber == (*iterMetasploit).cveNumber) //通过比较CVE，查询知识库里有没有满足case要求的漏洞
				{
					std::string str = (*iterMetasploit).platform;
					str += "#";
					str += (*iterMetasploit).exploit;
					str += "#";
					str += (*iterMetasploit).payload;
					str += "#";
					str += "RHOST=";
					str += myCase.goal.strHost;
					strHostName = myCase.goal.strHost;
					strAccType = myCase.exp.accType;
					str += " ";
					str += (*iterMetasploit).parameter;
					strArrAttackStringsForOnePath.push_back(str); //构造攻击字符串
					break;
				}
			}

			hostStatus.hotsName = strHostName;
			hostStatus.cveNumber = strCVENumber;
			hostStatus.accType = strAccType;
			hostStatus.status = false;
			arrHostStatusForOnePath.push_back(hostStatus); //保存主机状态
		}

		str2DArrAttackStrings.push_back(strArrAttackStringsForOnePath);
		str2DArrHostStatus.push_back(arrHostStatusForOnePath);
		iPathIndex++;
	}
	MessageBox(strMessage.c_str());

	int size = str2DArrAttackStrings.size();
	string str;
	for (vecStr::iterator iterStrTarget = strArrTargets.begin(); iterStrTarget != strArrTargets.end(); ++iterStrTarget)
	{
		str += *iterStrTarget; //所有的Target组成的字符串，后来根本没有用
	}

	mInfo->DoModal(); //显示TestInfo对话框，也就是渗透测试控制台，“Begin perform penetration tesing”云云
}

void PentestToolMain::OnButtonPentestTool() 
{
	// TODO: Add your control notification handler code here
	mToolBase->DoModal(); //打开“渗透测试手段库”对话框
}
